// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  fullName        String
  username        String  @unique
  password_hashed String
  salt            String  @default("")
  email           String  @unique
  phone_number    String?
  farms           Farm[]
  actionLogs      UserActionLog[]
}

model UserActionLog {
  id          String  @id @default(uuid())
  userId      String                    
  user        User     @relation(fields: [userId], references: [id]) 
  action      String                   
  description String?                  
  areaId      Int
  area        Area     @relation(fields: [areaId], references: [id])
  timestamp   DateTime @default(now()) 
}


model Farm {
  id            String   @id @default(uuid())
  name          String
  establishedAt DateTime
  description   String?
  size          Float
  address       String
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  areas         Area[]
}

model Area {
  id           Int           @id @default(autoincrement())
  name         String
  size         Float
  farmId       String
  farm         Farm          @relation(fields: [farmId], references: [id])
  records      Record[]
  devices      DeviceLog[]
  schedules    Schedule[]
  plantedCrops PlantedCrop[]
  actionLogs   UserActionLog[]
}

model Crop {
  id           String        @id @default(uuid())
  name         String
  notes        String?
  seasonTime   String?
  plantedCrops PlantedCrop[]
}

model PlantedCrop {
  areaId   Int
  cropId   String
  quantity Int

  area Area @relation(fields: [areaId], references: [id], onDelete: Cascade)
  crop Crop @relation(fields: [cropId], references: [id], onDelete: Cascade)

  @@id([areaId, cropId])
}

model DeviceLog {
  id         String   @id @default(uuid())
  action     String
  timestamp  DateTime
  deviceType String
  note       String?
  areaId     Int
  area       Area     @relation(fields: [areaId], references: [id])
}

model Record {
  id           String   @id @default(uuid())
  timestamp    DateTime
  light        Float
  temperature  Float
  humidity     Float
  soilMoisture Float
  areaId       Int
  area         Area     @relation(fields: [areaId], references: [id])
}

model Schedule {
  id        String   @id @default(uuid())
  startTime String    // Giờ bắt đầu, lưu dưới dạng "HH:mm"
  endTime   String    // Giờ kết thúc, lưu dưới dạng "HH:mm"
  frequency String[]  // Danh sách ngày trong tuần, e.g., ["Monday", "Wednesday"]
  activity  String
  updatedAt DateTime @default(now()) @updatedAt
  areaId    Int
  area      Area     @relation(fields: [areaId], references: [id])
}
